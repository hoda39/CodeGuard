import * as vscode from 'vscode';

export class VulnerabilityFixProvider implements vscode.CodeActionProvider {
  public static readonly providedCodeActionKinds = [
    vscode.CodeActionKind.QuickFix
  ];

  constructor(private analysisManager: any) {}

  async provideCodeActions(
    document: vscode.TextDocument,
    range: vscode.Range | vscode.Selection,
    context: vscode.CodeActionContext
  ): Promise<vscode.CodeAction[] | null> {
    const actions: vscode.CodeAction[] = [];

    // Check if there are CodeGuard diagnostics in the range
    const diagnostics = context.diagnostics.filter(
      diagnostic => diagnostic.source === 'CodeGuard'
    );

    if (diagnostics.length === 0) {
      return null;
    }

    // Create fix action for each vulnerability
    for (const diagnostic of diagnostics) {
      const action = this.createFixAction(document, range, diagnostic);
      if (action) {
        actions.push(action);
      }
    }

    return actions;
  }

  private createFixAction(
    document: vscode.TextDocument,
    range: vscode.Range,
    diagnostic: vscode.Diagnostic
  ): vscode.CodeAction | null {
    const action = new vscode.CodeAction(
      'Fix Vulnerability',
      vscode.CodeActionKind.QuickFix
    );

    action.diagnostics = [diagnostic];
    action.isPreferred = true;
    action.command = {
      command: 'codeguard.fixVulnerability',
      title: 'Fix Vulnerability',
      arguments: [document, range]
    };

    return action;
  }
} 